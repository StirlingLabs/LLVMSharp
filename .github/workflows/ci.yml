name: ci

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v[0-9]+.*'

  pull_request:
    branches:
      - '**'
      - '!gh-pages'
    types: [ opened, reopened, ready_for_review, synchronize ]

defaults:
  run:
    shell: bash

jobs:
  skip_check:
    name: Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.collate_checks.outputs.should_skip }}
      release: ${{ steps.released_check.outputs.release }}
    steps:
    -   name: Check if CI is forced
        id: force_ci_check
        if: |
            github.event_name == 'push' &&
            contains(github.event.head_commit.message, '[force ci]')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event.pull_request &&
          ( steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false' )
        env:
            draft: ${{ github.event.pull_request.draft }}
        run: |
            echo "::set-output name=should_skip::$draft"
    -   name: Check if this is Tagged
        if: |
            github.ref_type == 'tag'
        run: |
            echo Ref named $tag
        env:
          tag: ${{ github.ref_name }}
    -   name: Check if this is a Release
        id: released_check
        if: |
            github.event_name == 'push' &&
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
            echo "::set-output name=should_skip::false"
            echo "::set-output name=release::true"
    -   name: Check if changes pushed
        id: push_new_check
        if: |
            github.event_name == 'push' &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
    -   name: Collate Checks
        id: collate_checks
        if: |
            (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
            (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
            pr_draft_check: ${{ steps.pr_draft_check.outcome }}
            force_ci_check: ${{ steps.force_ci_check.outcome }}
            released_check: ${{ steps.released_check.outcome }}
            push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
            echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
            if [ "$pr_draft_check" == "skipped" ] && \
                [ "$force_ci_check" == "skipped" ] && \
                [ "$released_check" == "skipped" ] && \
                [ "$push_new_check" == "skipped" ]
            then
                echo "All checks skipped, I don't know what to do."
                exit 1
            else
                echo "::set-output name=should_skip::true"
            fi

  build:
    name: Build
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
    - name: Get SHA
      id: sha
      run: echo "::set-output name=short::${GITHUB_SHA::7}"
    - name: NuGet Auth
      uses: StirlingLabs/GithubNugetAuthAction@main
    - name: Restore
      run: dotnet restore
    - name: Build
      run: |
        versionTag=""
        if [[ -z ${releaseFlag+x} ]] || [[ -z "${releaseFlag}" ]] ; then
          echo "Not a release, won't specify version."
        else
          versionTag="-p:VersionPrefix=${versionString:1}"
        fi
        dotnet build -c Release $versionTag --no-restore
      env:
        releaseFlag: ${{ needs.skip_check.outputs.release }}
        versionString: ${{ github.ref_name }}
    - name: List Files
      run: ls -lR
    - name: Pack
      run: dotnet pack -c Release --no-restore --no-build
    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          ./artifacts/**/*
        if-no-files-found: error

  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    needs: [ build ]
    strategy:
      matrix:
          os: [ubuntu-22.04, macos-12, windows-2022]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Download built artifacts
        uses: actions/download-artifact@v3
      - name: List Files
        run: ls -lR
      - name: Test
        run: dotnet test --blame --no-restore --no-build

  publish:
    name: Publish NuPkg
    needs: [ build, test ]
    if: needs.skip_check.outputs.release == 'true'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
      - name: List Files
        run: ls -lR
      - name: Push to GitHub Package Repo
        run: |
            dotnet nuget push "./artifacts/pkg/Release/*.nupkg" --source https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
      - name: Push to NuGet Package Repo
        if: |
            !contains(github.ref_name, '-') &&
            !github.event.release.prerelease
        run: |
            echo Would have pushed to NuGet as well
            #dotnet nuget push "./artifacts/pkg/Release/*.nupkg" -k ${{secrets.NUGET_STIRLINGLABS_API_KEY}} -s https://api.nuget.org/v3/index.json --no-symbols --skip-duplicate
