name: ci

on:
  push:
    branches: [ main, master ]
    tags:
    - '!v[0-9].*'

  pull_request:
    branches:
    - '**'
    - '!gh-pages'
    types: [ opened, reopened, ready_for_review, synchronize ]

jobs:
  skip_check:
    name: Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.collate_checks.outputs.should_skip }}
      run_integration: true
      run_release: ${{ !steps.collate_checks.outputs.should_skip }}
    steps:
    -   name: Check if CI is forced
        id: force_ci_check
        if: |
            github.event_name == 'push' &&
            contains(github.event.head_commit.message, '[force ci]')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event.pull_request &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false')
        env:
            draft: ${{ github.event.pull_request.draft }}
        run: |
            echo "::set-output name=should_skip::$draft"
    -   name: Check if this is a Release
        id: released_check
        if: |
            github.event_name == 'push' &&
            github.ref_type == 'tag' &&
            startsWith(github.ref_name, 'v')
        run: |
            echo "::set-output name=should_skip::false"
    -   name: Check if changes pushed
        id: push_new_check
        if: |
            github.event_name == 'push' &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
            skip_after_successful_duplicate: 'true'
            paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**", "**/Doxyfile.in"]'
    -   name: Collate Checks
        id: collate_checks
        if: |
            (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
            (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
            (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
            (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
            pr_draft_check: ${{ steps.pr_draft_check.outcome }}
            force_ci_check: ${{ steps.force_ci_check.outcome }}
            released_check: ${{ steps.released_check.outcome }}
            push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
            echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
            if [ "$pr_draft_check" == "skipped" ] && \
                [ "$force_ci_check" == "skipped" ] && \
                [ "$released_check" == "skipped" ] && \
                [ "$push_new_check" == "skipped" ]
            then
                echo "All checks skipped, I don't know what to do."
                exit 1
            else
                echo "::set-output name=should_skip::true"
            fi

  build:
    name: Build
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v2
    - name: Get SHA
      id: sha
      run: echo "::set-output name=short::${GITHUB_SHA::7}"
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore
    - name: Pack
      run: dotnet pack -c Release --no-restore --no-build
    - uses: actions/upload-artifact@v3
      with:
        name: LLVMSharp-${{ steps.sha.outputs.short }}
        path: |
          ./artifacts/bin/**/*
          ./artifacts/log/**/*
          ./artifacts/pkg/**/*
          ./artifacts/tst/**/*
        if-no-files-found: error

  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    needs: [ build ]
    strategy:
      matrix:
          os: [ubuntu-22.04, macos-12, windows-2022]
      fail-fast: false
    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v3
      - name: List Files
        run: ls -lR
      - name: Test
        run: dotnet test

  publish:
    name: Push NuPkg to GitHub
    needs: [ build, test]
    if: |
      false &&
      github.event_name == 'push' &&
      github.ref_type == 'branch' &&
      (github.ref_name == 'main' || github.ref_name == 'master')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
    - name: List Files
      run: ls -lR
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - run: dotnet nuget push "./artifacts/pkg/Release/*.nupkg" --source https://nuget.pkg.github.com/dotnet/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
